diff -rupN _source/config.sub newlib-1.19.0/config.sub
--- _source/config.sub	2010-06-01 17:53:40.000000000 +0000
+++ newlib-1.19.0/config.sub	2015-07-01 07:12:59.000000000 +0000
@@ -1298,6 +1298,7 @@ case $os in
 	      | -sym* | -kopensolaris* \
 	      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \
 	      | -aos* | -aros* \
+	      | -toaru* \
 	      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \
 	      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \
 	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \
diff -rupN _source/newlib/configure.host newlib-1.19.0/newlib/configure.host
--- _source/newlib/configure.host	2010-12-02 19:30:46.000000000 +0000
+++ newlib-1.19.0/newlib/configure.host	2015-07-01 07:12:59.000000000 +0000
@@ -418,6 +418,9 @@ case "${host}" in
   h8500-*-elf*)
 	sys_dir=h8500hms
 	;;
+  i[34567]86-*-toaru*)
+	sys_dir=toaru
+	;;
   i[34567]86-*-rdos*)
 	sys_dir=rdos
 	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
@@ -543,6 +546,9 @@ esac
 # THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
 
 case "${host}" in
+  *-*-toaru)
+	newlib_cflags="${newlib_cflags} -fPIC -DSIGNAL_PROVIDED -DMISSING_SYSCALL_NAMES -DMALLOC_PROVIDED"
+	;;
   *-*-cygwin*)
 	test -z "$cygwin_srcdir" && cygwin_srcdir=`cd ${srcdir}/../winsup/cygwin; pwd`
 	export cygwin_srcdir
diff -rupN _source/newlib/configure.host.orig newlib-1.19.0/newlib/configure.host.orig
--- _source/newlib/configure.host.orig	1970-01-01 00:00:00.000000000 +0000
+++ newlib-1.19.0/newlib/configure.host.orig	2010-12-02 19:30:46.000000000 +0000
@@ -0,0 +1,857 @@
+# configure.host
+
+# This shell script handles all host based configuration for newlib.
+# It sets various shell variables based on the the host and the
+# configuration options.  You can modify this shell script without
+# needing to rerun autoconf.
+
+# This shell script should be invoked as
+#   . configure.host
+# If it encounters an error, it will exit with a message.
+
+# FIXME: This script is too complicated.  It does things in too many
+# different ways.  This was taken from the old Cygnus configure script
+# with only minor changes.  It should be cleaned up.
+
+# FIXME: The general approach of picking and choosing which
+# directories to configure, other than machine_dir and sys_dir, is
+# potentially confusing.
+
+# It uses the following shell variables:
+#   host		The configuration host
+#   host_cpu		The configuration host CPU
+#   newlib_mb		--enable-newlib-mb ("yes", "no")
+#   target_optspace	--enable-target-optspace ("yes", "no", "")
+#   newlib_multithread	--enable-newlib-multithread ("yes", "no", "yes")
+#   newlib_elix_level	--enable-newlib-elix-level ("1","2","3","4") ("4")
+#   newlib_io_c99_formats --enable-newlib-io-c99-formats ("yes", "no", "")
+#   newlib_io_long_long --enable-newlib-io-long-long ("yes", "no", "")
+#   newlib_io_long_double --enable-newlib-io-long-double ("yes", "no", "")
+
+# It sets the following shell variables:
+#   newlib_cflags	Special CFLAGS to use when building
+#   machine_dir		Subdirectory of libc/machine to configure
+#   sys_dir		Subdirectory of libc/sys to configure
+#   have_sys_mach_dir	Is there a machine subdirectory in sys subdirectory
+#   posix_dir		"posix" to build libc/posix, "" otherwise
+#   signal_dir		"signal" to build libc/signal, "" otherwise
+#   stdio64_dir		"stdio64" to build libc/stdio64, "" otherwise
+#   syscall_dir		"syscalls" to build libc/syscalls, "" otherwise
+#   unix_dir		"unix" to build libc/unix, "" otherwise
+#   use_libtool         flag: use libtool to build newlib?
+#   aext                library extension - needed for libtool support
+#   oext                object file extension - needed for libtool support
+#   lpfx		library object prefix - generated when no libtool
+#   crt1                name of crt1 object if one is provided
+#   crt1_dir            directory where crt1 object is found
+#   have_crt0		"yes"/"no" if crt0 is/isn't provided.
+#			"" if crt0 is provided when sys_dir is set
+
+newlib_cflags=
+libm_machine_dir=
+machine_dir=
+sys_dir=
+posix_dir=
+signal_dir=signal
+stdio_dir=stdio
+stdio64_dir=
+xdr_dir=
+syscall_dir=
+unix_dir=
+mach_add_setjmp=
+crt1=
+crt1_dir=
+have_crt0=
+use_libtool=no
+have_sys_mach_dir=no
+default_newlib_io_c99_formats=no
+default_newlib_io_long_long=no
+default_newlib_io_long_double=no
+default_newlib_io_pos_args=no
+default_newlib_atexit_dynamic_alloc=yes
+aext=a
+oext=o
+lpfx="lib_a-"
+
+case "${target_optspace}:${host}" in
+  yes:*)
+    newlib_cflags="${newlib_cflags} -Os"
+    ;;
+  :m32r-* | :d10v-* | :d30v-* | :avr-* | :m32c-* )
+    newlib_cflags="${newlib_cflags} -Os"
+    ;;
+  no:* | :*)
+    ;;
+esac
+
+# Get the source directories to use for the CPU type.
+# machine_dir should supply CPU dependent routines, such as setjmp.
+# newlib_cflags is passed to gcc when compiling.
+# THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
+
+case "${host_cpu}" in
+  a29k)
+	machine_dir=a29k
+	;;
+  arc)
+	machine_dir=
+	;;
+  arm)
+	machine_dir=arm
+	;;
+  avr*)
+	newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED -mcall-prologues"
+	;;
+  bfin)
+	machine_dir=bfin
+	;;
+  cr16*)
+	machine_dir=cr16
+       ;;
+  cris | crisv32)
+	machine_dir=cris
+	;;
+  crx*)
+	machine_dir=crx
+	;;
+  d10v*)
+	machine_dir=d10v
+	;;
+  d30v*)
+	machine_dir=d30v
+	;;
+  ep9312)
+	machine_dir=arm
+	;;
+  fido)
+	machine_dir=m68k
+	newlib_cflags="${newlib_cflags} -DCOMPACT_CTYPE"
+	;;
+  fr30)
+	machine_dir=fr30
+	;;
+  frv)
+	machine_dir=frv
+        ;;
+  h8300)
+	machine_dir=h8300
+	;;
+  h8500)
+	machine_dir=h8500
+	;;
+  hppa*)
+	machine_dir=hppa
+	;;
+  i960)
+	machine_dir=i960
+	;;
+  i[34567]86)
+	# Don't use for these since they provide their own setjmp.
+	case ${host} in
+	*-*-sco* | *-*-cygwin*) 
+		libm_machine_dir=i386
+		machine_dir=i386
+		;;
+	*) 
+		libm_machine_dir=i386
+		machine_dir=i386
+		mach_add_setjmp=true
+		;;
+	esac
+	;;
+  ia64*)
+	;;
+  iq2000)
+	machine_dir=iq2000
+	;;
+  lm32)
+	machine_dir=lm32
+	;;
+  m32c)
+	machine_dir=m32c
+	newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED -DSMALL_MEMORY"
+	;;
+
+  m32r*)
+	machine_dir=m32r
+	;;
+
+  m68hc11|m6811|m68hc12|m6812)
+	machine_dir=m68hc11
+	newlib_cflags="-DPREFER_SIZE_OVER_SPEED -Os -mrelax"
+	CFLAGS="-g -Os"
+	;;
+  
+  m68*)
+	machine_dir=m68k
+	newlib_cflags="${newlib_cflags} -DCOMPACT_CTYPE"
+	;;
+  m88k)
+	machine_dir=m88k
+	newlib_cflags="${newlib_cflags} -m88000"
+	;;
+  m88110)
+	machine_dir=m88k
+	newlib_cflags="${newlib_cflags} -m88110"
+	;;
+  mcore)
+	;;
+  microblaze)
+	machine_dir=microblaze
+	;;
+  mep)
+	machine_dir=mep
+	;;
+  mips*)
+	machine_dir=mips
+	;;
+  mmix)
+	;;
+  mn10200)
+	machine_dir=mn10200
+	;;
+  mn10300)
+	default_newlib_io_long_long="yes"
+	machine_dir=mn10300
+	;;
+  moxie)
+	machine_dir=moxie
+        ;;
+  mt*)
+	machine_dir=mt
+	;;
+  or16)
+	;;
+  or32)
+	;;
+  powerpc*)
+	machine_dir=powerpc
+	;;
+  rx)
+	machine_dir=rx
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -ffunction-sections -fdata-sections "
+	;;
+  sh | sh64)
+	machine_dir=sh
+	;;
+  sparc*)
+	machine_dir=sparc
+	# FIXME: Might wish to make MALLOC_ALIGNMENT more generic.
+	newlib_cflags="${newlib_cflags} -DMALLOC_ALIGNMENT=8"
+	;;
+  strongarm)
+	machine_dir=arm
+	;;
+  xscale)
+	machine_dir=xscale
+	;;
+  thumb)
+	machine_dir=arm
+	;;
+  tic4x|c4x)
+	machine_dir=tic4x
+	;;
+  tic6x)
+	machine_dir=tic6x
+	;;
+  tic80*)
+	machine_dir=tic80
+	;;
+  v70)
+	;;
+  v810)
+	;;
+  v850*)
+	machine_dir=v850
+	newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED "
+	;;
+  w65*)
+	machine_dir=w65
+	;;
+  x86_64)
+	machine_dir=x86_64
+	;;
+  xc16x*)
+    machine_dir=xc16x
+    ;;
+  xstormy16)
+	machine_dir=xstormy16
+	newlib_cflags="${newlib_cflags} -DMALLOC_PROVIDED"
+	newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED"
+        ;;
+  z8k)
+	machine_dir=z8k
+	;;
+  spu)
+	stdio_dir=
+	libm_machine_dir=spu
+	machine_dir=spu
+	newlib_cflags="${newlib_cflags} -D_POSIX_MODE"
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	newlib_cflags="${newlib_cflags} -ffunction-sections -fdata-sections "
+	;;
+  *)
+	echo '***' "Newlib does not support CPU ${host_cpu}" 1>&2
+	exit 1
+	;;
+esac
+
+# Disable thread support if requested.
+
+if [ "${newlib_multithread}" = "no" ] ; then
+	newlib_cflags="${newlib_cflags} -D__SINGLE_THREAD__"
+fi
+
+# Disable syscall support if requested.
+
+if [ "${newlib_may_supply_syscalls}" = "no" ] ; then
+        newlib_cflags="${newlib_cflags} -D__NO_SYSCALLS__"
+fi
+
+# Enable multibyte support if requested or it is defaulted
+# for target.
+
+if [ "x${newlib_mb}" = "x" ]; then
+	case "${host}" in
+  	  i[34567]86-pc-linux-*|*-*-cygwin*)
+		newlib_mb=yes
+	  	;;
+	esac
+fi
+
+# Disable printf/scanf floating-point support if requested.
+
+if [ "${newlib_io_float}" = "no" ] ; then
+	newlib_cflags="${newlib_cflags} -DNO_FLOATING_POINT"
+fi
+
+# Verify if shared newlib support is allowed and set appropriate variables
+# We don't want to use libtool for platforms that we are not going to
+# support shared libraries.  This is because it adds executable tests which
+# we don't want for most embedded platforms.
+case "${host}" in
+  i[34567]86-pc-linux-*)
+    use_libtool=yes
+    have_sys_mach_dir=yes
+    stdio64_dir=stdio64
+    oext=lo
+    lpfx=
+    aext=la ;;
+  *) ;; #shared library not supported for ${host}
+esac
+
+# Get the source directories to use for the host.  unix_dir is set
+# to unix to get some standard Unix routines.  posix_dir is set to get some
+# standard Posix routines.  sys_dir should supply system dependent routines
+# including crt0.
+# THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
+
+case "${host}" in
+  *-*-cygwin*)
+	posix_dir=posix
+	stdio64_dir=stdio64
+	xdr_dir=xdr
+	;;
+  *-*-netware*)
+	signal_dir=
+	sys_dir=netware
+	;;
+  *-*-rtems*)			# generic RTEMS support
+	sys_dir=rtems
+	posix_dir=posix
+	unix_dir=unix
+	;;
+  a29k-*-*)
+	sys_dir=a29khif
+	signal_dir=
+	;;
+  arc-*-*)
+	sys_dir=arc
+	;;
+  arm-*-*)
+	sys_dir=arm
+	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+	  have_crt0="no"
+	fi
+	;;
+  bfin-*-*)
+	sys_dir=
+	;;
+  cr16-*-*)
+	sys_dir=
+	;;
+  crx*)
+	sys_dir=
+	;;
+  d10v*)
+	sys_dir=d10v
+	;;
+  d30v*)
+	sys_dir=
+	;;
+  ep9312-*-*)
+	sys_dir=arm
+	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+	  have_crt0="no"
+	fi
+	;;
+  frv*)
+        sys_dir=
+        ;;
+  h8300-*-hms*)
+	sys_dir=h8300hms
+	;;
+  h8300-*-elf*)
+	sys_dir=h8300hms
+	;;
+  h8300-*-coff*)
+	sys_dir=h8300hms
+	;;
+  h8300-*-xray*)
+	sys_dir=h8300xray
+	;;
+  h8500-*-hms*)
+	sys_dir=h8500hms
+	;;
+  h8500-*-elf*)
+	sys_dir=h8500hms
+	;;
+  i[34567]86-*-rdos*)
+	sys_dir=rdos
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  i[34567]86-*-sco*)
+	sys_dir=sysvi386
+	unix_dir=unix
+	;;
+  i[34567]86-pc-linux-*)
+	sys_dir=linux
+	unix_dir=unix
+	posix_dir=posix
+	crt1=crt1.o
+	crt1_dir=libc/sys/${sys_dir}	
+	gcc_dir=`gcc -print-search-dirs | awk '/^install:/{print $2}'`
+	default_newlib_io_c99_formats="yes"
+	default_newlib_io_long_double="yes"
+	default_newlib_io_long_long="yes"
+	default_newlib_io_pos_args="yes"
+	#newlib_cflags="${newlib_cflags} -Werror" # DEBUGGING ONLY;BREAKS BUILD
+	newlib_cflags="${newlib_cflags} -Wall"
+	newlib_cflags="${newlib_cflags} -D_I386MACH_ALLOW_HW_INTERRUPTS"
+	newlib_cflags="${newlib_cflags} -DHAVE_FCNTL"
+	newlib_cflags="${newlib_cflags} -DHAVE_GETOPT"
+	# --- Required when building a shared library ------------------------
+	newlib_cflags="${newlib_cflags} -fPIC -D_I386MACH_NEED_SOTYPE_FUNCTION"
+	# --- The three lines below are optional ------------------------------
+	##newlib_cflags="${newlib_cflags} -nostdinc"
+	##newlib_cflags="${newlib_cflags} -I`newlib-flags --kernel-dir`/include"
+	##newlib_cflags="${newlib_cflags} -idirafter ${gcc_dir}include"
+	;;
+
+  m68hc11-*-*|m6811-*-*|m6812-*-*|m68hc12-*-*)
+	;;
+
+  m68k-sun-sunos*)
+	unix_dir=unix
+	;;
+  m8*-bug-*)
+	sys_dir=m88kbug
+	;;
+  mep-*-*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  microblaze-*-*)
+	machine_dir=microblaze
+	;;
+  mips*-dec-*)
+	sys_dir=decstation
+	;;
+  mmix-knuth-mmixware)
+	sys_dir=mmixware
+	;;
+  moxie*)
+        sys_dir=
+        ;;
+  powerpcle-*-pe)
+	posix_dir=posix
+	;;
+  sh*-*)
+	sys_dir=sh
+	;;
+  sparc-sun-sunos*)
+	sys_dir=sun4
+	unix_dir=unix
+	;;
+  sparc64*)
+	sys_dir=sparc64
+	unix_dir=unix
+	;;
+  spu-*-*)
+	default_newlib_io_long_long="yes"
+	default_newlib_atexit_dynamic_alloc="no"
+	;;
+  strongarm-*-*)
+	sys_dir=arm
+	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+	  have_crt0="no"
+	fi
+	;;
+  thumb-*-*)
+	sys_dir=arm
+	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+	  have_crt0="no"
+	fi
+	;;
+  tic6x*)
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	have_crt0="no"
+	;;
+  tic80*)
+	sys_dir=tic80
+	;;
+  v70-nec-*)
+	sys_dir=sysvnecv70
+	;;
+  v810-*-*)
+	sys_dir=sysnec810
+	;;
+  v850*-*-*)
+	sys_dir=sysnecv850
+        if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+          have_crt0="no"
+        fi
+	;;
+  w65-*-*)
+	sys_dir=w65
+	;;
+  xscale-*-*)
+	sys_dir=arm
+	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
+	  have_crt0="no"
+	fi
+	;;
+  z8k-*-coff)
+	sys_dir=z8ksim
+	;;
+esac
+
+# Host specific flag settings -- usually for features that are not
+# general enough or broad enough to be handled above.
+# THIS TABLE IS ALPHA SORTED.  KEEP IT THAT WAY.
+
+case "${host}" in
+  *-*-cygwin*)
+	test -z "$cygwin_srcdir" && cygwin_srcdir=`cd ${srcdir}/../winsup/cygwin; pwd`
+	export cygwin_srcdir
+	default_newlib_io_c99_formats="yes"
+	default_newlib_io_long_long="yes"
+	default_newlib_io_long_double="yes"
+	default_newlib_io_pos_args="yes"
+	CC="${CC} -I${cygwin_srcdir}/include"
+	newlib_cflags="${newlib_cflags} -DHAVE_OPENDIR -DHAVE_RENAME -DSIGNAL_PROVIDED -D_COMPILING_NEWLIB -DHAVE_BLKSIZE -DHAVE_FCNTL -DMALLOC_PROVIDED"
+	syscall_dir=syscalls
+	;;
+# RTEMS supplies its own versions of some routines:
+#       malloc()            (reentrant version)
+#       exit()              RTEMS has a "global" reent to flush
+#       signal()/raise()    RTEMS has its own including pthread signals
+#       _XYZ_r()            RTEMS has its own reentrant routines
+#
+#  NOTE: When newlib malloc uses a semaphore, RTEMS will switch to that.
+  *-*-rtems*)
+	default_newlib_io_long_long="yes"
+	default_newlib_io_c99_formats="yes"
+	newlib_cflags="${newlib_cflags} -D_COMPILING_NEWLIB"
+	newlib_cflags="${newlib_cflags} -DMALLOC_PROVIDED -DEXIT_PROVIDED -DSIGNAL_PROVIDED -DREENTRANT_SYSCALLS_PROVIDED -DHAVE_NANOSLEEP -DHAVE_BLKSIZE -DHAVE_FCNTL -DHAVE_ASSERT_FUNC"
+        # turn off unsupported items in posix directory 
+	newlib_cflags="${newlib_cflags} -D_NO_GETLOGIN -D_NO_GETPWENT -D_NO_GETUT -D_NO_GETPASS -D_NO_SIGSET -D_NO_WORDEXP -D_NO_POPEN"
+	;;
+# VxWorks supplies its own version of malloc, and the newlib one
+# doesn't work because VxWorks does not have sbrk.
+  *-wrs-vxworks*)
+	newlib_cflags="${newlib_cflags} -DMALLOC_PROVIDED -DMISSING_SYSCALL_NAMES -DHAVE_FCNTL"
+	;;
+# UDI doesn't have exec, so system() should fail the right way
+  a29k-amd-udi)
+	newlib_cflags="${newlib_cflags} -DNO_EXEC"
+	syscall_dir=syscalls
+	;;
+  arc-*-*)
+	syscall_dir=syscalls
+	;;
+  arm-*-pe)
+	syscall_dir=syscalls
+	;;
+  arm-*-*)
+	syscall_dir=syscalls
+# If newlib is supplying syscalls, select which debug protocol is being used.
+# ARM_RDP_MONITOR selects the Demon monitor.
+# ARM_RDI_MONITOR selects the Angel monitor.
+# If neither are defined, then hard coded defaults will be used
+# to create the program's environment.
+# If --disable-newlib-supplied-syscalls is specified, then the end-user
+# may specify the protocol via gcc spec files supplied by libgloss.
+# See also thumb below.
+	if [ "x${newlib_may_supply_syscalls}" = "xyes" ] ; then
+#         newlib_cflags="${newlib_cflags} -DARM_RDP_MONITOR"
+	  newlib_cflags="${newlib_cflags} -DARM_RDI_MONITOR"
+	fi
+	;;
+  arc*)
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED"
+	;;
+  avr*)
+	newlib_cflags="${newlib_cflags} -DNO_EXEC -DSMALL_MEMORY -DMISSING_SYSCALL_NAMES"
+	;;
+  bfin*)
+	syscall_dir=syscalls
+	;;
+  cris-*-* | crisv32-*-*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DHAVE_RENAME -D_USE_WRITE -DCOMPACT_CTYPE"
+	syscall_dir=syscalls
+	;;
+  cr16-*-*)
+	syscall_dir=syscalls
+	;;
+  crx-*-*)
+	newlib_cflags="${newlib_cflags} -DHAVE_RENAME -DMISSING_SYSCALL_NAMES"
+	syscall_dir=
+	;;
+  d10v*)
+	newlib_cflags="${newlib_cflags} -DSMALL_MEMORY"
+	syscall_dir=syscalls
+	;;
+  d30v*)
+	newlib_cflags="${newlib_cflags} -DABORT_MESSAGE -DSMALL_MEMORY -DMISSING_SYSCALL_NAMES"
+	syscall_dir=
+	;;
+  ep9312-*-*)
+	syscall_dir=syscalls
+	if [ "x${newlib_may_supply_syscalls}" = "xyes" ] ; then
+	  newlib_cflags="${newlib_cflags} -DARM_RDI_MONITOR"
+	fi
+	;;
+  fido-*-elf)
+	newlib_cflags="${newlib_cflags} -DHAVE_RENAME -DHAVE_SYSTEM -DMISSING_SYSCALL_NAMES"
+	syscall_dir=
+	;;
+  fr30-*-*)
+	syscall_dir=syscalls
+	;;
+  frv-*-*)
+        syscall_dir=syscalls
+	default_newlib_io_long_long="yes"
+        ;;
+  h8300*-*-*)
+	syscall_dir=syscalls	
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
+	# Simulator only extensions for H8300.
+	# Uncomment the next line to enable them.
+	# newlib_cflags="${newlib_cflags} -D__SIMULATOR__"
+	;;	
+  h8500-*-*)
+	syscall_dir=syscalls	
+	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
+	;;	
+  i[34567]86-*-sco*)
+	newlib_cflags="${newlib_cflags} -DSIGNAL_PROVIDED -DHAVE_FCNTL"
+	;;
+  i[34567]86-*-netware*)
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES -DNO_EXEC -DABORT_PROVIDED -DCLOCK_PROVIDED -DMALLOC_PROVIDED -DHAVE_FCNTL"
+	;;
+  iq2000*)
+	syscall_dir=syscalls
+	default_newlib_io_long_long="yes"
+	;;
+  lm32-*-*)
+	syscall_dir=syscalls
+	;;
+  m32c-*-*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES -DABORT_PROVIDED"
+	syscall_dir=
+  	;;
+  m32r-*-*)
+	# Pass -msdata=sdata so _impure_ptr goes in .sdata.
+	# We don't generate sda relocs however for upward compatibility.
+	# FIXME: This is necessary because the default multilib doesn't
+	# use --print-multi-lib.
+	newlib_cflags="${newlib_cflags} -msdata=sdata"
+	syscall_dir=syscalls
+	;;
+  m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
+	newlib_cflags="${newlib_cflags} -DNO_EXEC -DABORT_PROVIDED -DSMALL_MEMORY -DMISSING_SYSCALL_NAMES"
+	;;
+  m68k-unknown-elf)
+	newlib_cflags="${newlib_cflags} -DHAVE_RENAME -DHAVE_SYSTEM -DMISSING_SYSCALL_NAMES"
+	syscall_dir=
+	;;
+  mcore-*-*)
+	syscall_dir=syscalls
+	;;
+  microblaze-*-*)
+   	default_newlib_io_long_long="yes"
+ 	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES -DSMALL_MEMORY -D_REENT_SMALL"
+	;;
+  mips64vr*-*-*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  mips*-*-elf*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  mmix-*)
+	syscall_dir=syscalls
+	# We need every symbol 32-bit aligned, so the invalid
+	# construct with attribute ((alias ("_ctype_b+127"))) breaks.
+	newlib_cflags="${newlib_cflags} -DCOMPACT_CTYPE"
+	;;
+  mn10?00-*-*)
+	syscall_dir=syscalls
+	;;
+  moxie-*-*)
+        syscall_dir=syscalls
+	default_newlib_io_long_long="yes"
+        ;;
+  powerpc*-*-eabialtivec*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  powerpc*-*-eabispe*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	;;
+  powerpc*-*-eabi* | \
+  powerpc*-*-elf* | \
+  powerpc*-*-linux* | \
+  powerpc*-*-rtem* | \
+  powerpc*-*-sysv* | \
+  powerpc*-*-solaris*)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -mrelocatable-lib -mno-eabi -mstrict-align -DMISSING_SYSCALL_NAMES"
+	;;
+  powerpcle-*-pe)
+	newlib_cflags="${newlib_cflags} -DHAVE_OPENDIR -DHAVE_RENAME -DHAVE_FCNTL"
+	syscall_dir=syscalls
+	;;
+  sh*-*-*)
+	default_newlib_io_long_long="yes"
+	syscall_dir=syscalls
+	;;
+  sparc-sun-sunos*)
+	newlib_cflags="${newlib_cflags} -DSIGNAL_PROVIDED"
+	;;
+  sparc64-*-*)
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED -DHAVE_BLKSIZE -DHAVE_FCNTL"
+	# This either belongs elsewhere or nowhere. But I need *something*,
+	# so for now it's here ...
+	case "${host_os}" in
+	  aoutv8 | *32p)
+		newlib_cflags="${newlib_cflags} -DTARGET_PTR_SIZE=32" ;;
+	  *)
+		newlib_cflags="${newlib_cflags} -DTARGET_PTR_SIZE=64" ;;
+	esac
+	;;
+  strongarm-*-*)
+	syscall_dir=syscalls
+	;;
+  thumb-*-pe)
+	syscall_dir=syscalls
+# Don't use the debugging protocols just yet.
+	;;
+  thumb-*-*)
+	syscall_dir=syscalls
+# If newlib is supplying syscalls, select which debug protocol is being used.
+# ARM_RDP_MONITOR selects the Demon monitor.
+# ARM_RDI_MONITOR selects the Angel monitor.
+# If neither are defined, then hard coded defaults will be used
+# to create the program's environment.
+# If --disable-newlib-supplied-syscalls is specified, then the end-user
+# may specify the protocol via gcc spec files supplied by libgloss.
+	if [ "x${newlib_may_supply_syscalls}" = "xyes" ] ; then
+#         newlib_cflags="${newlib_cflags} -DARM_RDP_MONITOR"
+	  newlib_cflags="${newlib_cflags} -DARM_RDI_MONITOR"
+	fi
+	;;
+  tic6x*)
+	syscall_dir=
+	newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED"
+	;;
+  tic80*)
+	syscall_dir=syscalls
+	;;
+  v850*-*-*)
+	syscall_dir=syscalls
+	;;
+  w65-*-*)
+	syscall_dir=syscalls	
+	newlib_cflags="${newlib_cflags} -DSMALL_DTOA -DSMALL_MEMORY"
+	;;
+  xc16x-*)
+          syscall_dir=syscalls
+        ;;
+  xscale-*-*)
+	syscall_dir=syscalls
+	newlib_cflags="${newlib_cflags} -DHAVE_SYSTEM -DHAVE_RENAME"
+	if [ "x${newlib_may_supply_syscalls}" = "xyes" ] ; then
+	  newlib_cflags="${newlib_cflags} -DARM_RDI_MONITOR"
+	fi
+	;;
+  xstormy16-*-*)
+	syscall_dir=syscalls
+	;;
+  z8k-*-*)
+	syscall_dir=syscalls
+	;;
+  *)
+	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
+	syscall_dir=
+	;;
+esac
+
+# Use defaults for certain settings if not specified by user
+
+# Enable C99 format support in I/O routines if requested.
+if [ "x${newlib_io_c99_formats}" = "x" ]; then
+	if [ ${default_newlib_io_c99_formats} = "yes" ]; then
+		newlib_io_c99_formats="yes";
+	fi
+fi
+
+# Enable long long support in I/O routines if requested.
+if [ "x${newlib_io_long_long}" = "x" ]; then
+	if [ ${default_newlib_io_long_long} = "yes" ]; then
+		newlib_io_long_long="yes";
+	fi
+fi
+
+# Enable long double support in I/O routines if requested.
+if [ "x${newlib_io_long_double}" = "x" ]; then
+	if [ ${default_newlib_io_long_double} = "yes" ]; then
+		newlib_io_long_double="yes";
+	fi
+fi
+
+# Enable printf positional argument support if requested.
+if [ "x${newlib_io_pos_args}" = "x" ]; then
+	if [ ${default_newlib_io_pos_args} = "yes" ]; then
+		newlib_io_pos_args="yes";
+	fi
+fi
+
+# Disable atexit dynamic allocation if requested.
+if [ "x${newlib_atexit_dynamic_alloc}" = "x" ]; then
+	if [ ${default_newlib_atexit_dynamic_alloc} = "yes" ]; then
+		newlib_atexit_dynamic_alloc="yes"; 
+	fi
+fi
+
+if test -z "${have_crt0}" && test -n "${sys_dir}"; then
+  have_crt0="yes"
+fi
diff -rupN _source/newlib/libc/include/sys/stat.h newlib-1.19.0/newlib/libc/include/sys/stat.h
--- _source/newlib/libc/include/sys/stat.h	2010-08-06 18:26:21.000000000 +0000
+++ newlib-1.19.0/newlib/libc/include/sys/stat.h	2015-07-01 07:12:59.000000000 +0000
@@ -150,8 +150,8 @@ int	_EXFUN(mkfifo,( const char *__path,
 int	_EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 mode_t	_EXFUN(umask,( mode_t __mask ));
 
-#if defined (__SPU__) || defined(__rtems__) || defined(__CYGWIN__) && !defined(__INSIDE_CYGWIN__)
 int	_EXFUN(lstat,( const char *__path, struct stat *__buf ));
+#if defined (__SPU__) || defined(__rtems__) || defined(__CYGWIN__) && !defined(__INSIDE_CYGWIN__)
 int	_EXFUN(mknod,( const char *__path, mode_t __mode, dev_t __dev ));
 #endif
 
diff -rupN _source/newlib/libc/include/sys/unistd.h newlib-1.19.0/newlib/libc/include/sys/unistd.h
--- _source/newlib/libc/include/sys/unistd.h	2010-10-08 15:28:49.000000000 +0000
+++ newlib-1.19.0/newlib/libc/include/sys/unistd.h	2015-07-01 07:16:16.000000000 +0000
@@ -53,9 +53,7 @@ int     _EXFUN(execvp, (const char *__fi
 int     _EXFUN(execvpe, (const char *__file, char * const __argv[], char * const __envp[] ));
 int	_EXFUN(faccessat, (int __dirfd, const char *__path, int __mode, int __flags));
 #endif
-#if defined(__CYGWIN__) || defined(__rtems__) || defined(__SPU__)
 int     _EXFUN(fchdir, (int __fildes));
-#endif
 int     _EXFUN(fchmod, (int __fildes, mode_t __mode ));
 #if !defined(__INSIDE_CYGWIN__)
 int     _EXFUN(fchown, (int __fildes, uid_t __owner, gid_t __group ));
diff -rupN _source/newlib/libc/include/sys/utime.h newlib-1.19.0/newlib/libc/include/sys/utime.h
--- _source/newlib/libc/include/sys/utime.h	2000-02-17 19:39:46.000000000 +0000
+++ newlib-1.19.0/newlib/libc/include/sys/utime.h	2015-07-01 07:12:59.000000000 +0000
@@ -15,6 +15,8 @@ struct utimbuf
   time_t modtime; 
 };
 
+int utime(const char *filename, const struct utimbuf *times);
+
 #ifdef __cplusplus
 };
 #endif
diff -rupN _source/newlib/libc/stdio/fseek.c newlib-1.19.0/newlib/libc/stdio/fseek.c
--- _source/newlib/libc/stdio/fseek.c	2009-12-17 19:43:43.000000000 +0000
+++ newlib-1.19.0/newlib/libc/stdio/fseek.c	2015-07-01 07:12:59.000000000 +0000
@@ -160,210 +160,6 @@ _DEFUN(_fseek_r, (ptr, fp, offset, whenc
       return EOF;
     }
 
-  /*
-   * Change any SEEK_CUR to SEEK_SET, and check `whence' argument.
-   * After this, whence is either SEEK_SET or SEEK_END.
-   */
-
-  switch (whence)
-    {
-    case SEEK_CUR:
-      /*
-       * In order to seek relative to the current stream offset,
-       * we have to first find the current stream offset a la
-       * ftell (see ftell for details).
-       */
-      _fflush_r (ptr, fp);   /* may adjust seek offset on append stream */
-      if (fp->_flags & __SOFF)
-	curoff = fp->_offset;
-      else
-	{
-	  curoff = seekfn (ptr, fp->_cookie, (_fpos_t) 0, SEEK_CUR);
-	  if (curoff == -1L)
-	    {
-	      _funlockfile (fp);
-	      __sfp_lock_release ();
-	      return EOF;
-	    }
-	}
-      if (fp->_flags & __SRD)
-	{
-	  curoff -= fp->_r;
-	  if (HASUB (fp))
-	    curoff -= fp->_ur;
-	}
-      else if (fp->_flags & __SWR && fp->_p != NULL)
-	curoff += fp->_p - fp->_bf._base;
-
-      offset += curoff;
-      whence = SEEK_SET;
-      havepos = 1;
-      break;
-
-    case SEEK_SET:
-    case SEEK_END:
-      havepos = 0;
-      break;
-
-    default:
-      ptr->_errno = EINVAL;
-      _funlockfile (fp);
-      __sfp_lock_release ();
-      return (EOF);
-    }
-
-  /*
-   * Can only optimise if:
-   *	reading (and not reading-and-writing);
-   *	not unbuffered; and
-   *	this is a `regular' Unix file (and hence seekfn==__sseek).
-   * We must check __NBF first, because it is possible to have __NBF
-   * and __SOPT both set.
-   */
-
-  if (fp->_bf._base == NULL)
-    __smakebuf_r (ptr, fp);
-  if (fp->_flags & (__SWR | __SRW | __SNBF | __SNPT))
-    goto dumb;
-  if ((fp->_flags & __SOPT) == 0)
-    {
-      if (seekfn != __sseek
-	  || fp->_file < 0
-#ifdef __USE_INTERNAL_STAT64
-	  || _fstat64_r (ptr, fp->_file, &st)
-#else
-	  || _fstat_r (ptr, fp->_file, &st)
-#endif
-	  || (st.st_mode & S_IFMT) != S_IFREG)
-	{
-	  fp->_flags |= __SNPT;
-	  goto dumb;
-	}
-#ifdef	HAVE_BLKSIZE
-      fp->_blksize = st.st_blksize;
-#else
-      fp->_blksize = 1024;
-#endif
-      fp->_flags |= __SOPT;
-    }
-
-  /*
-   * We are reading; we can try to optimise.
-   * Figure out where we are going and where we are now.
-   */
-
-  if (whence == SEEK_SET)
-    target = offset;
-  else
-    {
-#ifdef __USE_INTERNAL_STAT64
-      if (_fstat64_r (ptr, fp->_file, &st))
-#else
-      if (_fstat_r (ptr, fp->_file, &st))
-#endif
-	goto dumb;
-      target = st.st_size + offset;
-    }
-  if ((long)target != target)
-    {
-      ptr->_errno = EOVERFLOW;
-      _funlockfile (fp);
-      __sfp_lock_release ();
-      return EOF;
-    }
-
-  if (!havepos)
-    {
-      if (fp->_flags & __SOFF)
-	curoff = fp->_offset;
-      else
-	{
-	  curoff = seekfn (ptr, fp->_cookie, 0L, SEEK_CUR);
-	  if (curoff == POS_ERR)
-	    goto dumb;
-	}
-      curoff -= fp->_r;
-      if (HASUB (fp))
-	curoff -= fp->_ur;
-    }
-
-  /*
-   * Compute the number of bytes in the input buffer (pretending
-   * that any ungetc() input has been discarded).  Adjust current
-   * offset backwards by this count so that it represents the
-   * file offset for the first byte in the current input buffer.
-   */
-
-  if (HASUB (fp))
-    {
-      curoff += fp->_r;       /* kill off ungetc */
-      n = fp->_up - fp->_bf._base;
-      curoff -= n;
-      n += fp->_ur;
-    }
-  else
-    {
-      n = fp->_p - fp->_bf._base;
-      curoff -= n;
-      n += fp->_r;
-    }
-
-  /*
-   * If the target offset is within the current buffer,
-   * simply adjust the pointers, clear EOF, undo ungetc(),
-   * and return.
-   */
-
-  if (target >= curoff && target < curoff + n)
-    {
-      register int o = target - curoff;
-
-      fp->_p = fp->_bf._base + o;
-      fp->_r = n - o;
-      if (HASUB (fp))
-	FREEUB (ptr, fp);
-      fp->_flags &= ~__SEOF;
-      memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
-      _funlockfile (fp);
-      __sfp_lock_release ();
-      return 0;
-    }
-
-  /*
-   * The place we want to get to is not within the current buffer,
-   * but we can still be kind to the kernel copyout mechanism.
-   * By aligning the file offset to a block boundary, we can let
-   * the kernel use the VM hardware to map pages instead of
-   * copying bytes laboriously.  Using a block boundary also
-   * ensures that we only read one block, rather than two.
-   */
-
-  curoff = target & ~(fp->_blksize - 1);
-  if (seekfn (ptr, fp->_cookie, curoff, SEEK_SET) == POS_ERR)
-    goto dumb;
-  fp->_r = 0;
-  fp->_p = fp->_bf._base;
-  if (HASUB (fp))
-    FREEUB (ptr, fp);
-  fp->_flags &= ~__SEOF;
-  n = target - curoff;
-  if (n)
-    {
-      if (__srefill_r (ptr, fp) || fp->_r < n)
-	goto dumb;
-      fp->_p += n;
-      fp->_r -= n;
-    }
-  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
-  _funlockfile (fp);
-  __sfp_lock_release ();
-  return 0;
-
-  /*
-   * We get here if we cannot optimise the seek ... just
-   * do it.  Allow the seek function to change fp->_bf._base.
-   */
-
 dumb:
   if (_fflush_r (ptr, fp)
       || seekfn (ptr, fp->_cookie, offset, whence) == POS_ERR)
diff -rupN _source/newlib/libc/stdlib/mallocr.c newlib-1.19.0/newlib/libc/stdlib/mallocr.c
--- _source/newlib/libc/stdlib/mallocr.c	2010-05-31 19:15:41.000000000 +0000
+++ newlib-1.19.0/newlib/libc/stdlib/mallocr.c	2015-07-01 07:12:59.000000000 +0000
@@ -609,8 +609,11 @@ do {
   operating system immediately after a free().
 */
 
+#define HAVE_MMAP 0
+#define HAVE_MREMAP 0
+
 #ifndef HAVE_MMAP
-#define HAVE_MMAP 1
+#define HAVE_MMAP 0
 #endif
 
 /*
diff -rupN _source/newlib/libc/sys/configure newlib-1.19.0/newlib/libc/sys/configure
--- _source/newlib/libc/sys/configure	2010-12-16 21:59:03.000000000 +0000
+++ newlib-1.19.0/newlib/libc/sys/configure	2015-07-01 07:12:59.000000000 +0000
@@ -798,6 +798,7 @@ sysvi386
 sysvnecv70
 tic80
 w65
+toaru
 z8ksim'
 
 # Initialize some variables set by options.
@@ -11820,6 +11821,8 @@ subdirs="$subdirs a29khif"
  ;;
 	w65) subdirs="$subdirs w65"
  ;;
+	toaru) subdirs="$subdirs toaru"
+ ;;
 	z8ksim) subdirs="$subdirs z8ksim"
  ;;
   esac;
diff -rupN _source/newlib/libc/sys/configure.in newlib-1.19.0/newlib/libc/sys/configure.in
--- _source/newlib/libc/sys/configure.in	2010-02-24 20:59:55.000000000 +0000
+++ newlib-1.19.0/newlib/libc/sys/configure.in	2015-07-01 07:12:59.000000000 +0000
@@ -45,6 +45,7 @@ if test -n "${sys_dir}"; then
 	sysvnecv70) AC_CONFIG_SUBDIRS(sysvnecv70) ;;
 	tic80) AC_CONFIG_SUBDIRS(tic80) ;;
 	w65) AC_CONFIG_SUBDIRS(w65) ;;
+	toaru) AC_CONFIG_SUBDIRS(toaru) ;;
 	z8ksim) AC_CONFIG_SUBDIRS(z8ksim) ;;
   esac;
 fi
